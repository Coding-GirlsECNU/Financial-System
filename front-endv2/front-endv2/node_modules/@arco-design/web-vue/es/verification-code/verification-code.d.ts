import { PropType, VNode } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: StringConstructor;
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    length: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
    };
    disabled: BooleanConstructor;
    masked: BooleanConstructor;
    readonly: BooleanConstructor;
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: PropType<(index: number, character: string) => VNode>;
    };
    formatter: {
        type: PropType<(inputValue: string, index: number, value: string) => string | boolean>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string) => true;
    change: (value: string) => true;
    finish: (value: string) => true;
    input: (inputValue: string, index: number, ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    length?: unknown;
    size?: unknown;
    disabled?: unknown;
    masked?: unknown;
    readonly?: unknown;
    error?: unknown;
    separator?: unknown;
    formatter?: unknown;
} & {
    length: number;
    disabled: boolean;
    readonly: boolean;
    error: boolean;
    defaultValue: string;
    masked: boolean;
} & {
    size?: "mini" | "medium" | "large" | "small" | undefined;
    separator?: ((index: number, character: string) => VNode) | undefined;
    modelValue?: string | undefined;
    formatter?: ((inputValue: string, index: number, value: string) => string | boolean) | undefined;
}> & {
    onChange?: ((value: string) => any) | undefined;
    onInput?: ((inputValue: string, index: number, ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
    onFinish?: ((value: string) => any) | undefined;
}, {
    length: number;
    disabled: boolean;
    readonly: boolean;
    error: boolean;
    defaultValue: string;
    masked: boolean;
}>;
export default _default;
