import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _VerificationCode from './verification-code';
declare const VerificationCode: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            length: number;
            disabled: boolean;
            readonly: boolean;
            error: boolean;
            defaultValue: string;
            masked: boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            length?: unknown;
            size?: unknown;
            disabled?: unknown;
            masked?: unknown;
            readonly?: unknown;
            error?: unknown;
            separator?: unknown;
            formatter?: unknown;
        } & {
            length: number;
            disabled: boolean;
            readonly: boolean;
            error: boolean;
            defaultValue: string;
            masked: boolean;
        } & {
            size?: "mini" | "medium" | "large" | "small" | undefined;
            separator?: ((index: number, character: string) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) | undefined;
            modelValue?: string | undefined;
            formatter?: ((inputValue: string, index: number, value: string) => string | boolean) | undefined;
        }> & {
            onChange?: ((value: string) => any) | undefined;
            onInput?: ((inputValue: string, index: number, ev: Event) => any) | undefined;
            "onUpdate:modelValue"?: ((value: string) => any) | undefined;
            onFinish?: ((value: string) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "length" | "disabled" | "readonly" | "error" | "defaultValue" | "masked">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "input", inputValue: string, index: number, ev: Event) => void) & ((event: "change", value: string) => void) & ((event: "update:modelValue", value: string) => void) & ((event: "finish", value: string) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            length?: unknown;
            size?: unknown;
            disabled?: unknown;
            masked?: unknown;
            readonly?: unknown;
            error?: unknown;
            separator?: unknown;
            formatter?: unknown;
        } & {
            length: number;
            disabled: boolean;
            readonly: boolean;
            error: boolean;
            defaultValue: string;
            masked: boolean;
        } & {
            size?: "mini" | "medium" | "large" | "small" | undefined;
            separator?: ((index: number, character: string) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) | undefined;
            modelValue?: string | undefined;
            formatter?: ((inputValue: string, index: number, value: string) => string | boolean) | undefined;
        }> & {
            onChange?: ((value: string) => any) | undefined;
            onInput?: ((inputValue: string, index: number, ev: Event) => any) | undefined;
            "onUpdate:modelValue"?: ((value: string) => any) | undefined;
            onFinish?: ((value: string) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:modelValue': (value: string) => true;
            change: (value: string) => true;
            finish: (value: string) => true;
            input: (inputValue: string, index: number, ev: Event) => true;
        }, string, {
            length: number;
            disabled: boolean;
            readonly: boolean;
            error: boolean;
            defaultValue: string;
            masked: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        length?: unknown;
        size?: unknown;
        disabled?: unknown;
        masked?: unknown;
        readonly?: unknown;
        error?: unknown;
        separator?: unknown;
        formatter?: unknown;
    } & {
        length: number;
        disabled: boolean;
        readonly: boolean;
        error: boolean;
        defaultValue: string;
        masked: boolean;
    } & {
        size?: "mini" | "medium" | "large" | "small" | undefined;
        separator?: ((index: number, character: string) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) | undefined;
        modelValue?: string | undefined;
        formatter?: ((inputValue: string, index: number, value: string) => string | boolean) | undefined;
    }> & {
        onChange?: ((value: string) => any) | undefined;
        onInput?: ((inputValue: string, index: number, ev: Event) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onFinish?: ((value: string) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    length?: unknown;
    size?: unknown;
    disabled?: unknown;
    masked?: unknown;
    readonly?: unknown;
    error?: unknown;
    separator?: unknown;
    formatter?: unknown;
} & {
    length: number;
    disabled: boolean;
    readonly: boolean;
    error: boolean;
    defaultValue: string;
    masked: boolean;
} & {
    size?: "mini" | "medium" | "large" | "small" | undefined;
    separator?: ((index: number, character: string) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) | undefined;
    modelValue?: string | undefined;
    formatter?: ((inputValue: string, index: number, value: string) => string | boolean) | undefined;
}> & {
    onChange?: ((value: string) => any) | undefined;
    onInput?: ((inputValue: string, index: number, ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
    onFinish?: ((value: string) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string) => true;
    change: (value: string) => true;
    finish: (value: string) => true;
    input: (inputValue: string, index: number, ev: Event) => true;
}, string, {
    length: number;
    disabled: boolean;
    readonly: boolean;
    error: boolean;
    defaultValue: string;
    masked: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type VerificationCodeInstance = InstanceType<typeof _VerificationCode>;
export default VerificationCode;
