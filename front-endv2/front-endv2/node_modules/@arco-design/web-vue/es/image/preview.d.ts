import { PropType, CSSProperties } from 'vue';
declare const _default: import("vue").DefineComponent<{
    renderToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    src: {
        type: StringConstructor;
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    actionsLayout: {
        type: PropType<string[]>;
        default: () => string[];
    };
    popupContainer: {
        type: PropType<string | HTMLElement>;
    };
    inGroup: {
        type: BooleanConstructor;
        default: boolean;
    };
    groupArrowProps: {
        type: ObjectConstructor;
        default: () => {};
    };
    escToClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    wheelZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    keyboard: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultScale: {
        type: NumberConstructor;
        default: number;
    };
    zoomRate: {
        type: NumberConstructor;
        default: number;
    };
}, {
    prefixCls: string;
    classNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    container: import("vue").ComputedRef<HTMLElement>;
    wrapperStyles: import("vue").ComputedRef<CSSProperties>;
    scale: import("vue").Ref<number>;
    translate: import("vue").Ref<number[]>;
    rotate: import("vue").Ref<number>;
    moving: import("vue").Ref<boolean>;
    mergedVisible: import("vue").ComputedRef<boolean>;
    isLoading: import("vue").ComputedRef<boolean>;
    isLoaded: import("vue").ComputedRef<boolean>;
    scaleValueVisible: import("vue").Ref<boolean>;
    refWrapper: import("vue").Ref<any>;
    refImage: import("vue").Ref<any>;
    onWheel: {
        (...args: any[]): void;
        cancel(): void;
    };
    onMaskClick: (e: MouseEvent) => void;
    onCloseClick: () => void;
    onImgLoad(): void;
    onImgError(): void;
    actions: import("vue").ComputedRef<({
        key: string;
        name: string;
        content: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        onClick: () => void;
        disabled?: undefined;
    } | {
        key: string;
        name: string;
        content: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        onClick: () => void;
        disabled: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:visible")[], "close" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    renderToBody?: unknown;
    src?: unknown;
    visible?: unknown;
    defaultVisible?: unknown;
    maskClosable?: unknown;
    closable?: unknown;
    actionsLayout?: unknown;
    popupContainer?: unknown;
    inGroup?: unknown;
    groupArrowProps?: unknown;
    escToClose?: unknown;
    wheelZoom?: unknown;
    keyboard?: unknown;
    defaultScale?: unknown;
    zoomRate?: unknown;
} & {
    renderToBody: boolean;
    closable: boolean;
    actionsLayout: string[];
    defaultVisible: boolean;
    maskClosable: boolean;
    inGroup: boolean;
    groupArrowProps: Record<string, any>;
    escToClose: boolean;
    wheelZoom: boolean;
    keyboard: boolean;
    defaultScale: number;
    zoomRate: number;
} & {
    popupContainer?: string | HTMLElement | undefined;
    visible?: boolean | undefined;
    src?: string | undefined;
}> & {
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
}, {
    renderToBody: boolean;
    visible: boolean;
    closable: boolean;
    actionsLayout: string[];
    defaultVisible: boolean;
    maskClosable: boolean;
    inGroup: boolean;
    groupArrowProps: Record<string, any>;
    escToClose: boolean;
    wheelZoom: boolean;
    keyboard: boolean;
    defaultScale: number;
    zoomRate: number;
}>;
export default _default;
